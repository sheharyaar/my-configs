":::::::::::::::::::::::::::::::: Vundle Config ::::::::::::::::::::::::::::::

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Vim Packages
Plugin 'vim-airline/vim-airline'
Plugin 'junegunn/limelight.vim'
Plugin 'vimsence/vimsence'
Plugin 'preservim/nerdtree'
Plugin 'skanehira/preview-markdown.vim'
Plugin 'ycm-core/YouCompleteMe'

" Color Scheme Packages
Plugin 'ghifarit53/tokyonight-vim'
Plugin 'ayu-theme/ayu-vim'
Plugin 'wojciechkepka/vim-github-dark'
Plugin 'joshdick/onedark.vim'
Plugin 'rakr/vim-one'
" Needed by one
Plugin 'sheerun/vim-polyglot'                   

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

":::::::::::::::::::::::::::::  VIM Configs here :::::::::::::::::::::::::

set nocompatible                        " be iMproved, required
filetype off                            " required
filetype plugin on  

syntax on                               " syntax highlighting on
set backspace=2                         " Enable backspace for EOL, etc.

set number                              " Enable line number
set tabstop=8 shiftwidth=8 noexpandtab  " Enable 8 space tabs

au BufNewFile * startinsert             " Start vim in insert mode in blank files

" keyboard mappings and splitting mappings
set splitbelow
set splitright
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>
map <F8> :w <CR> :!gcc % -o %< && ./%< <CR>

":::::::::::::::::::::: Plugin Specific Configs :::::::::::::::::::::::::::::

" NERDTree options
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" Airline options
let g:airline_powerline_fonts = 1
set laststatus=2

" YouCompleMe options for python interprether
let g:ycm_python_interpreter_path = '/usr/bin/python'
let g:ycm_python_sys_path = ['', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '/home/lagnos/.local/lib/python3.9/site-packages', '/usr/lib/python3.9/site-packages']
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'


":::::::::::::::::::::::::::: Color Schemes :::::::::::::::::::::::::::::::

">>>>>>>>>>>>>>>> Code for Trucolor support <<<<<<<<<<<<<<<<

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


">>>>>>>>>>>>>>>> Ayu and ghdark config <<<<<<<<<<<<<<<<<<<

"set termguicolors     " enable true colors support
"" let ayucolor="light"  " for light version of theme
"" let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
"" colorscheme ayu
"colorscheme ghdark

">>>>>>>>>>>>>>>> Tokyo Night Config <<<<<<<<<<<<<<<<<<<<<
 
"set termguicolors
let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1
colorscheme tokyonight

">>>>>>>>>>>>>>>> One Config <<<<<<<<<<<<<<<<<<<<<<<<<

"colorscheme onedark
"colorscheme one
"set background=dark " for the dark version
"set background=light " for the light version

"::::::::::::::::::::::::::::: End of Config ::::::::::::::::::::::::::::::

